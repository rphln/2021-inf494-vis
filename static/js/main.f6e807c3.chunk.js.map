{"version":3,"sources":["QueryDatasetForm.tsx","common.ts","Tabbed.tsx","TernaryPlot.tsx","ToxicityPlot.tsx","SubjectPlot.tsx","App.tsx","index.tsx"],"names":["QueryDatasetForm","queryInput","setQueryInput","element","props","refQueryInput","call","undefined","appendQuery","value","focus","this","refAppendQuery","onSubmit","isLoading","error","queryInputId","loading","danger","formErrorLabel","htmlFor","className","id","name","type","placeholder","ref","disabled","Component","defaultProps","uniqueId","QueryDatasetShortcuts","fields","onShortcutClick","map","onClick","PRELOADED","buildURL","path","params","window","location","hostname","query","isString","url","URL","each","key","castArray","entry","searchParams","append","href","makeAxis","title","template","gridcolor","linecolor","tickcolor","Tabbed","setActiveTab","active","setState","state","initial","components","minHeight","activeLabel","activeComponent","keys","role","event","style","TernaryPlot","entries","colors","layout","width","height","onPointClick","data","bySubject","sourceName","mode","a","b","c","text","hovertemplate","marker","color","opacity","size","baseLayout","ternary","aaxis","tickformat","baxis","caxis","ToxicityPlot","toxicity","toxic_sum","severe_toxic_sum","obscene_sum","threat_sum","insult_sum","identity_hate_sum","flatMap","subjectStats","subject","_","x","values","y","line","hovermode","xaxis","yaxis","SubjectPlot","App","preventDefault","points","handleQuerySubmit","refresh","endpoint","fetch","response","json","detail","ok","groupBy","Subject","colorMap","Toxicity","Sentiment","quickDialFields","Reddit","Telegram","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6e807c3.chunk.js","sourcesContent":["import { uniqueId } from \"lodash\";\nimport { Component, FormEventHandler, MouseEventHandler } from \"react\";\n\ntype QueryDatasetFormProperties = {\n  /**\n   * Calls the specified function with a reference to the query input element as the sole argument.\n   */\n  refQueryInput?: (element: HTMLInputElement) => void;\n\n  /**\n   * Calls the specified function with a reference to a function which appends text to the query input element as the sole argument.\n   */\n  refAppendQuery?: (appendQuery: (value: string) => void) => void;\n\n  /**\n   * Called as the inner form is submitted.\n   */\n  onSubmit: FormEventHandler<HTMLFormElement>;\n\n  /**\n   * Whether to disable the submit button with a loading spinner.\n   */\n  isLoading: boolean;\n\n  /**\n   * The HTML `id` for the query input element.\n   */\n  queryInputId: string;\n\n  /**\n   * Whether any error occurred and what should be shown.\n   */\n  error?: string;\n};\n\nexport class QueryDatasetForm extends Component<\n  QueryDatasetFormProperties,\n  {}\n> {\n  static defaultProps: Partial<QueryDatasetFormProperties> = {\n    queryInputId: uniqueId(\"query-dataset-form-\"),\n  };\n\n  /**\n   * The query input element.\n   */\n  private queryInput?: HTMLInputElement;\n\n  /**\n   * Tracks the input element used for queries.\n   * @param element A reference to the input element.\n   */\n  private setQueryInput = (element: HTMLInputElement) => {\n    this.queryInput = element;\n    this.props.refQueryInput?.call(undefined, element);\n  };\n\n  /**\n   * Appends `value` to the query input element contents.\n   * @param value The text to be appended.\n   */\n  private appendQuery = (value: string): undefined => {\n    if (!this.queryInput) return;\n\n    this.queryInput.value += value;\n    this.queryInput.focus();\n  };\n\n  componentDidMount() {\n    this.props.refAppendQuery?.call(undefined, this.appendQuery);\n  }\n\n  render() {\n    const { onSubmit, isLoading, error, queryInputId } = this.props;\n\n    const loading = isLoading ? \"is-loading\" : \"\";\n    const danger = error ? \"is-danger\" : \"\";\n\n    const formErrorLabel = error && (\n      <label htmlFor={queryInputId} className=\"help is-danger\">\n        {error}\n      </label>\n    );\n\n    return (\n      <form onSubmit={onSubmit}>\n        <fieldset className=\"field has-addons\">\n          <div className=\"control is-expanded\">\n            <input\n              id={queryInputId}\n              name={queryInputId}\n              type=\"text\"\n              placeholder=\"Enter a query expression\"\n              className={`input ${danger}`}\n              ref={this.setQueryInput}\n            />\n\n            {formErrorLabel}\n          </div>\n          <div className=\"control\">\n            <button\n              className={`button is-link ${loading}`}\n              disabled={isLoading}\n              type=\"submit\"\n            >\n              Query\n            </button>\n          </div>\n        </fieldset>\n      </form>\n    );\n  }\n}\n\ntype QueryDatasetShortcutsProperties = {\n  /**\n   * The HTML `class` attribute for the parent element.\n   */\n  className?: string;\n\n  fields: string[];\n  onShortcutClick: (value: string) => MouseEventHandler<HTMLButtonElement>;\n};\n\nexport class QueryDatasetShortcuts extends Component<\n  QueryDatasetShortcutsProperties,\n  {}\n> {\n  render() {\n    const { fields, onShortcutClick, className } = this.props;\n\n    const fieldToButton = (name: string) => (\n      <button key={name} className=\"button\" onClick={onShortcutClick(name)}>\n        {name}\n      </button>\n    );\n\n    return (\n      <div className={`buttons has-addons is-centered ${className}`}>\n        {fields.map(fieldToButton)}\n      </div>\n    );\n  }\n}\n","import { castArray, each, isString } from \"lodash\";\nimport { LayoutAxis } from \"plotly.js\";\n\nconst PRELOADED = {\n  \"\": \"/data/default.json\",\n\n  \"positive and toxic\": \"/data/positive_and_toxic.json\",\n  \"positive or negative\": \"/data/positive_or_negative.json\",\n  \"identity_hate and insult\": \"/data/identity_hate_and_insult.json\",\n  \"toxic or severe_toxic or obscene or threat or insult or identity_hate\":\n    \"/data/any_toxicity.json\",\n\n  'body.str.contains(\"Brazil\")': \"/data/brazil.json\",\n};\n\n/**\n * Appends a path to the back-end URL.\n *\n * @param path The sub-resource path components.\n * @returns A new, fully qualified URL to the resource.\n */\nexport function buildURL(\n  path: string,\n  params: { [key: string]: string | string[] }\n): string {\n  if (window.location.hostname === \"rphln.github.io\") {\n    const query = params.query as keyof typeof PRELOADED | undefined;\n\n    if (isString(query) && query in PRELOADED) {\n      return PRELOADED[query];\n    }\n  }\n\n  const url = new URL(path, \"http://127.0.0.1:8000/\");\n\n  each(params, (value, key) => {\n    each(castArray(value), (entry) => {\n      url.searchParams.append(key, entry);\n    });\n  });\n\n  return url.href;\n}\n\n/**\n * Returns the specification for an axis.\n */\nexport function makeAxis(\n  title: string,\n  template: Partial<LayoutAxis> = {}\n): Partial<LayoutAxis> {\n  return {\n    title,\n\n    ...template,\n\n    gridcolor: \"GhostWhite\",\n    linecolor: \"GhostWhite\",\n    tickcolor: \"GhostWhite\",\n  };\n}\n","import { Component, MouseEventHandler } from \"react\";\nimport { keys, map } from \"lodash\";\n\ntype TabbedProperties = {\n  /**\n   * The HTML `id` attribute of the tab container.\n   */\n  id: string;\n\n  /**\n   * The initially selected tab name.\n   */\n  initial: string;\n\n  /**\n   * The minimum height of the container element, to prevent the viewport from jumping around.\n   */\n  minHeight: number;\n\n  /**\n   * A mapping of tab names to tab elements.\n   */\n  components: {\n    [name: string]: JSX.Element;\n  };\n};\n\ntype TabbedState = {\n  /**\n   * The currently active component.\n   */\n  active?: string;\n};\n\nexport class Tabbed extends Component<TabbedProperties, TabbedState> {\n  /**\n   * Sets the tab whose name matches the specified value as active.\n   * @param active The tab to be activated.\n   */\n  private setActiveTab = (active: string): void => this.setState({ active });\n\n  render() {\n    const { active } = this.state ?? {};\n    const { id, initial, components, minHeight } = this.props;\n\n    const activeLabel = active ?? initial;\n    const activeComponent = components[activeLabel];\n\n    const makeTabEntry = (name: string) => {\n      const onClick: MouseEventHandler<HTMLAnchorElement> = (event) => {\n        this.setActiveTab(name);\n      };\n\n      return (\n        <li key={name} className={activeLabel === name ? \"is-active\" : \"\"}>\n          <a href={`#${id}`} role=\"button\" onClick={onClick}>\n            {name}\n          </a>\n        </li>\n      );\n    };\n\n    return (\n      <section id={id} className=\"section\">\n        <div className=\"tabs is-toggle is-centered\">\n          <ul>{map(keys(components), makeTabEntry)}</ul>\n        </div>\n\n        <div style={{ minHeight }}>{activeComponent}</div>\n      </section>\n    );\n  }\n}\n","import Plot from \"react-plotly.js\";\nimport { map } from \"lodash\";\nimport { Data, Layout, PlotMouseEvent } from \"plotly.js\";\nimport { Entries, ColorMap } from \"./App\";\nimport { makeAxis } from \"common\";\n\nexport function TernaryPlot({\n  entries,\n  colors,\n  layout,\n  width,\n  height,\n  onPointClick,\n}: {\n  entries: Entries;\n  colors: ColorMap;\n  layout?: Partial<Layout>;\n  width: number;\n  height: number;\n  onPointClick?: (event: Readonly<PlotMouseEvent>) => void;\n}) {\n  const data: Data[] = map(entries, (bySubject, sourceName) => ({\n    name: sourceName,\n\n    type: \"scatterternary\",\n    mode: \"markers\",\n\n    a: map(bySubject, \"positive_sum\"),\n    b: map(bySubject, \"negative_sum\"),\n    c: map(bySubject, \"neutral_sum\"),\n\n    text: map(bySubject, \"subject\"),\n\n    hovertemplate: `<b>%{text}</b>\n    <br />Positive: %{a}\n    <br />Negative: %{b}\n    <br />Neutral: %{c}\n    <extra></extra>`,\n\n    marker: {\n      color: colors[sourceName],\n      opacity: 0.75,\n      size: 15,\n    },\n  }));\n\n  const baseLayout: Partial<Layout> = {\n    title: \"Sentiment ratios across subjects\",\n\n    width,\n    height,\n\n    ternary: {\n      aaxis: makeAxis(\"Positive\", { tickformat: \",.0%\" }),\n      baxis: makeAxis(\"Negative\", { tickformat: \",.0%\" }),\n      caxis: makeAxis(\"Neutral\", { tickformat: \",.0%\" }),\n    },\n  };\n\n  return (\n    <Plot\n      data={data}\n      layout={{ ...baseLayout, ...layout }}\n      onClick={onPointClick}\n    />\n  );\n}\n","import Plot from \"react-plotly.js\";\nimport { flatMap, keys, map, values } from \"lodash\";\nimport { Data, Layout, PlotMouseEvent } from \"plotly.js\";\nimport { Entries, ColorMap, Entry } from \"./App\";\nimport { makeAxis } from \"common\";\n\nexport function ToxicityPlot({\n  entries,\n  colors,\n  layout,\n  width,\n  height,\n  onPointClick,\n}: {\n  entries: Entries;\n  colors: ColorMap;\n  layout?: Partial<Layout>;\n  width: number;\n  height: number;\n  onPointClick?: (event: Readonly<PlotMouseEvent>) => void;\n}) {\n  type Toxicity = keyof Entry &\n    (\n      | \"toxic_sum\"\n      | \"severe_toxic_sum\"\n      | \"obscene_sum\"\n      | \"threat_sum\"\n      | \"insult_sum\"\n      | \"identity_hate_sum\"\n    );\n\n  const toxicity: Record<Toxicity, string> = {\n    toxic_sum: \"Toxic\",\n    severe_toxic_sum: \"Severely toxic\",\n    obscene_sum: \"Obscene\",\n    threat_sum: \"Threat\",\n    insult_sum: \"Insult\",\n    identity_hate_sum: \"Identity hate\",\n  };\n\n  const data: Data[] = flatMap(entries, (bySubject, sourceName) => {\n    return map(bySubject, (subjectStats) => {\n      return {\n        type: \"scatter\",\n        mode: \"lines\",\n\n        name: subjectStats.subject,\n        text: map(toxicity, (_) => subjectStats.subject),\n\n        hovertemplate: `<b>%{text}</b>\n        <br />%{xaxis.title.text}: %{x}\n        <br />%{yaxis.title.text}: %{y}\n        <extra></extra>`,\n\n        x: values(toxicity),\n        y: map(\n          keys(toxicity) as Iterable<Toxicity>,\n          (key) => subjectStats[key] / subjectStats[\"body_count\"]\n        ),\n\n        line: { color: colors[sourceName] },\n      };\n    });\n  });\n\n  const baseLayout: Partial<Layout> = {\n    title: \"Toxicity ratios across subjects\",\n\n    width,\n    height,\n\n    hovermode: \"closest\",\n\n    xaxis: makeAxis(\"Classification\"),\n    yaxis: makeAxis(\"Occurrences\", { tickformat: \",.0%\" }),\n  };\n\n  return (\n    <Plot\n      data={data}\n      layout={{ ...baseLayout, ...layout }}\n      onClick={onPointClick}\n    />\n  );\n}\n","import Plot from \"react-plotly.js\";\nimport { map } from \"lodash\";\nimport { Data, Layout, PlotMouseEvent } from \"plotly.js\";\nimport { Entries, ColorMap } from \"./App\";\nimport { makeAxis } from \"common\";\n\nexport function SubjectPlot({\n  entries,\n  colors,\n  layout,\n  width,\n  height,\n  onPointClick,\n}: {\n  entries: Entries;\n  colors: ColorMap;\n  layout?: Partial<Layout>;\n  width: number;\n  height: number;\n  onPointClick?: (event: Readonly<PlotMouseEvent>) => void;\n}) {\n  const data: Data[] = map(entries, (bySubject, sourceName) => {\n    return {\n      type: \"bar\",\n\n      name: sourceName,\n      text: map(bySubject, \"subject\"),\n\n      hovertemplate: `<b>%{text}</b>\n        <br />Entries: %{y}\n        <extra></extra>`,\n\n      x: map(bySubject, \"subject\"),\n      y: map(bySubject, \"body_count\"),\n\n      marker: { color: colors[sourceName] },\n    };\n  });\n\n  const baseLayout: Partial<Layout> = {\n    title: \"Subject ratios across subjects\",\n\n    width,\n    height,\n\n    hovermode: \"closest\",\n\n    xaxis: makeAxis(\"Subject\"),\n    yaxis: makeAxis(\"Occurrences\"),\n  };\n\n  return (\n    <Plot\n      data={data}\n      layout={{ ...baseLayout, ...layout }}\n      onClick={onPointClick}\n    />\n  );\n}\n","import \"bulma/bulma.sass\";\n\nimport { Component, FormEventHandler, MouseEventHandler } from \"react\";\nimport { groupBy } from \"lodash\";\n\nimport { QueryDatasetShortcuts, QueryDatasetForm } from \"./QueryDatasetForm\";\nimport { buildURL } from \"./common\";\nimport { Tabbed } from \"./Tabbed\";\nimport { TernaryPlot } from \"./TernaryPlot\";\nimport { ToxicityPlot } from \"./ToxicityPlot\";\nimport { SubjectPlot } from \"./SubjectPlot\";\n\nexport type Entry = {\n  subject: string;\n  dataset: string;\n  positive_sum: number;\n  negative_sum: number;\n  neutral_sum: number;\n  body_count: number;\n  body_choice: number;\n  toxic_sum: number;\n  severe_toxic_sum: number;\n  obscene_sum: number;\n  threat_sum: number;\n  insult_sum: number;\n  identity_hate_sum: number;\n};\n\nexport type Entries = {\n  [source: string]: Entry[];\n};\n\nexport type ColorMap = {\n  [source: string]: string;\n};\n\ntype AppState = {\n  isLoading: boolean;\n  query?: string;\n  error?: string;\n  entries: Entries;\n};\n\nconst [width, height] = [1280, 800];\n\nclass App extends Component<{}, AppState> {\n  /**\n   * @see QueryDatasetForm\n   */\n  private queryInput?: HTMLInputElement;\n\n  /**\n   * @see QueryDatasetForm\n   */\n  private appendQuery?: (value: string) => void;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      query: \"\",\n      isLoading: true,\n      entries: {},\n    };\n  }\n\n  /**\n   * The fields which are available on the quick dial.\n   */\n  private static quickDialFields = [\n    \"body\",\n    \"dataset\",\n    \"subject\",\n    \"sentiment\",\n    \"positive\",\n    \"negative\",\n    \"neutral\",\n    \"toxic\",\n    \"severe_toxic\",\n    \"obscene\",\n    \"threat\",\n    \"insult\",\n    \"identity_hate\",\n\n    // Preloaded queries\n    \"positive or negative\",\n    \"positive and toxic\",\n    \"identity_hate and insult\",\n    \"toxic or severe_toxic or obscene or threat or insult or identity_hate\",\n    'body.str.contains(\"Brazil\")',\n  ];\n\n  static colorMap: ColorMap = {\n    Reddit: \"#FE6100\",\n    Telegram: \"#648FFF\",\n  };\n\n  async refresh() {\n    this.setState({ isLoading: true }, async () => {\n      const endpoint = buildURL(\"/\", { query: this.state.query ?? \"\" });\n\n      const response = await fetch(endpoint);\n      const { data, detail } = await response.json();\n\n      const state = {\n        isLoading: false,\n      };\n\n      if (!response.ok) {\n        return this.setState({ ...state, error: detail });\n      }\n\n      this.setState({\n        ...state,\n        error: undefined,\n        entries: groupBy(data, \"dataset\"),\n      });\n    });\n  }\n\n  async componentDidMount() {\n    return await this.refresh();\n  }\n\n  /**\n   * Creates an event handler to append a `value` to the query text input.\n   *\n   * @param value The value which will be appended.\n   * @returns The event handler.\n   */\n  private onShortcutClick =\n    (value: string): MouseEventHandler<HTMLButtonElement> =>\n    (event) => {\n      event.preventDefault();\n      return this.appendQuery?.call(undefined, value);\n    };\n\n  /**\n   * Called when a point in a graph is clicked.\n   */\n  private onPointClick = ({ points: [{ text }] }: any) =>\n    this.appendQuery?.call(undefined, `\"${text}\",`);\n\n  /**\n   * Handles the query form submission.\n   */\n  private handleQuerySubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n\n    this.setState({ query: this.queryInput?.value }, () => {\n      this.refresh();\n    });\n  };\n\n  render() {\n    const { error, entries, isLoading } = this.state ?? {};\n\n    const components = {\n      Subject: (\n        <SubjectPlot\n          width={width}\n          height={height}\n          entries={entries}\n          colors={App.colorMap}\n          onPointClick={this.onPointClick}\n        />\n      ),\n      Toxicity: (\n        <ToxicityPlot\n          width={width}\n          height={height}\n          entries={entries}\n          colors={App.colorMap}\n          onPointClick={this.onPointClick}\n        />\n      ),\n      Sentiment: (\n        <TernaryPlot\n          width={width}\n          height={height}\n          entries={entries}\n          colors={App.colorMap}\n          onPointClick={this.onPointClick}\n        />\n      ),\n    };\n\n    return (\n      <>\n        <section className=\"section\">\n          <div className=\"box\">\n            <div className=\"block\">\n              <QueryDatasetForm\n                error={error}\n                isLoading={isLoading}\n                onSubmit={this.handleQuerySubmit}\n                refQueryInput={(element) => (this.queryInput = element)}\n                refAppendQuery={(appendQuery) =>\n                  (this.appendQuery = appendQuery)\n                }\n              />\n            </div>\n\n            <QueryDatasetShortcuts\n              fields={App.quickDialFields}\n              onShortcutClick={this.onShortcutClick}\n            />\n          </div>\n        </section>\n\n        <Tabbed\n          id=\"graph\"\n          components={components}\n          initial=\"Toxicity\"\n          minHeight={height}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}